import logging
import os
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()

bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
ADMIN_ID = int(os.getenv("ADMIN_ID"))

class MailState(StatesGroup):
    waiting_for_message = State()

# ========================================================================
# ========================================================================
#               –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î (—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –µ—ë –æ—Ç—Å—É—Ç—Å–≤–∏–∏)
# ========================================================================
# ========================================================================
def init_db():
    if not os.path.exists('base.db'):
        with sqlite3.connect('base.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    id_tg INTEGER UNIQUE,
                    active INTEGER DEFAULT 1
                )
            ''')
            conn.commit()

init_db()

# ========================================================================
# ========================================================================
#                               –†–ê–°–°–´–õ–ö–ê
# ========================================================================
# ========================================================================
@dp.message(MailState.waiting_for_message)
async def process_mail_message(message: types.Message, state: FSMContext):
    await state.clear()
    
    with sqlite3.connect('base.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id_tg FROM users WHERE active = 1")
        users = cursor.fetchall()
    
    total = len(users)
    success = 0
    errors = 0
    batch_size = 30
    
    status_msg = await message.answer(f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞ (0/{total})")
    
    for i, user in enumerate(users, 1):
        try:
            await bot.copy_message(
                chat_id=user[0],
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
            success += 1
        except Exception as e:
            errors += 1
            with sqlite3.connect('base.db') as conn:
                cursor = conn.cursor()
                cursor.execute("UPDATE users SET active = 0 WHERE id_tg = ?", (user[0],))
                conn.commit()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        if i % 10 == 0:
            await status_msg.edit_text(
                f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞: {i}/{total} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {errors}"
            )
        
        # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 30 —Å–æ–æ–±—â–µ–Ω–∏–π
        if i % batch_size == 0:
            await asyncio.sleep(1)
    
    await status_msg.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {errors}"
    )


# ========================================================================
# ========================================================================
#                           –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ========================================================================
# ========================================================================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    
    with sqlite3.connect('base.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (id_tg, active) 
            VALUES (?, 1)
        ''', (user_id,))
        cursor.execute('''
            UPDATE users SET active = 1 WHERE id_tg = ?
        ''', (user_id,))
        conn.commit()
    
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

@dp.message(Command("stat"))
async def cmd_stat(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")

    with sqlite3.connect('base.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM users WHERE active = 1")
        active = cursor.fetchone()[0]
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}"
    )

@dp.message(Command("mail"))
async def cmd_mail(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(MailState.waiting_for_message)

# –ü—Ä–∏–º–µ—Ä echo
@dp.message()
async def echo_message(message: types.Message):
    await message.answer(f"üì® –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

# ========================================================================
# ========================================================================
#                               –ó–ê–ü–£–°–ö
# ========================================================================
# ========================================================================
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)